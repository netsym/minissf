#!@PERL@

use strict;

my $LLVM_CLANG = "@LLVM_CLANG@";
my $LDFLAGS = "@LDFLAGS@";
my $LD = "@MPICXX@";

# parse the command line arguments
my $debug = 0;
my @o_infiles = ();
my $exe_outfile = 0;
my @ldflags = ();
my @ldlibs = ();
my $clang_required = 1;
while(@ARGV) {
  my $myarg = shift @ARGV;
  if($myarg eq '-o') {
    $exe_outfile = shift @ARGV;
  } elsif($myarg =~ /^-l/ || $myarg =~ /^-L/) {
    push(@ldlibs, $myarg);
  } elsif($myarg =~ /^-/) {
    if($myarg =~ /-DAUTOXLATE_REQUIRED/) {
      my ($lhs, $rhs) = split('=', $myarg);
      if(defined($rhs) && ($rhs eq 'no')) { $clang_required = 0; }
    } elsif($myarg =~ /-DSSFCMDDEBUG/) {
      my ($lhs, $rhs) = split('=', $myarg);
      if(defined($rhs) && ($rhs eq 'yes')) { $debug = 1; }
    } else { push(@ldflags, $myarg); }
  } else { push(@o_infiles, $myarg); }
}
my $ldflags = join(' ', @ldflags);
my $ldlibs = join(' ', @ldlibs);
if(scalar(@o_infiles) == 0) { die "ERROR: missing input file!\n"; }
my $o_infiles = join(' ', @o_infiles);
if($exe_outfile eq 0) { $exe_outfile = "a.out"; }

sub runcmd {
  my $cmd = shift;
  if($debug) { print "> $cmd\n"; }
  #`$cmd`;
  open CMD, "$cmd 2>&1 |" or die;
  open LOG, ">>ssfout.log" or die;
  while(<CMD>) { print LOG $_; print }
  close CMD;
  my $exit = $? >> 8;
  close LOG;
  if($exit) { die; }
}

if($LLVM_CLANG ne 'yes' && $clang_required) { 
  die "ERROR: llvm/clang is required but is not configured with minissf!\n"; 
}

$ldflags = "${LDFLAGS} ${ldflags}";
runcmd "${LD} ${ldflags} ${o_infiles} -o ${exe_outfile} ${ldlibs} -L@SSFDIR@ -L@SSFDIR@/kernel/metis -lssf -lmetis -lpthread";
