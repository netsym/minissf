#!@PERL@

use strict;

my $LLVM_CLANG = "@LLVM_CLANG@";
my $CXXFLAGS = "@CXXFLAGS@ -I@SSFDIR@";
my $CXX = "@MPICXX@";
my $CLANG = "@LLVM_ROOT@/bin/clang";
my $CLANGITDIR = "@SSFDIR@/xlate/clangit";

# parse the command line arguments
my $debug = 0;
my $c_infile = 0;
my $x_infile = 0;
my $o_outfile = 0;
my @cxxflags = ();
my $clang_required = 1;
while(@ARGV) {
  my $myarg = shift @ARGV;
  if($myarg eq '-x') {
    $x_infile = shift @ARGV;
  } elsif($myarg eq '-o') {
    $o_outfile = shift @ARGV;
  } elsif($myarg =~ /^-/) {
    if($myarg =~ /-DAUTOXLATE_REQUIRED/) {
      my ($lhs, $rhs) = split('=', $myarg);
      if(defined($rhs) && ($rhs eq 'no')) { $clang_required = 0; }
    } elsif($myarg =~ /-DSSFCMDDEBUG/) {
      my ($lhs, $rhs) = split('=', $myarg);
      if(defined($rhs) && ($rhs eq 'yes')) { $debug = 1; }
    } else { push(@cxxflags, $myarg); }
  } else {
    if($c_infile eq 0) { $c_infile = $myarg; }
    else { die "ERROR: invalid command line!\n"; }
  }
}
my $cxxflags = join(' ', @cxxflags);
if($c_infile eq '') { die "ERROR: missing input file!\n"; }
if($x_infile eq '') { $x_infile = "plist.x"; }
if($o_outfile eq '') { $o_outfile = "${c_infile}.o"; } # XXX: should replace only the file extension

sub runcmd {
  my $cmd = shift;
  if($debug) { print "> $cmd\n"; }
  #`$cmd`;
  open CMD, "$cmd 2>&1 |" or die;
  open LOG, ">>ssfout.log" or die;
  while(<CMD>) { print LOG $_; print }
  close CMD;
  my $exit = $? >> 8;
  close LOG;
  if($exit) { die; }
}

$cxxflags = "${CXXFLAGS} ${cxxflags}";
if($LLVM_CLANG eq 'yes') {
  eval { runcmd "${CLANG} -cc1 -load ${CLANGITDIR}/libtranslate.so -plugin minissf-xlate ${cxxflags} -fexceptions -fblocks -fcxx-exceptions ${c_infile} -plugin-arg-minissf-xlate ${x_infile} -o _tmp_${c_infile} >> ssfout.log 2>&1"; };
  runcmd "${CXX} ${cxxflags} -c -o ${o_outfile} _tmp_${c_infile}";
} else {
  if($clang_required) { die "ERROR: llvm/clang is required but is not configured with minissf!\n"; }
  runcmd "${CXX} ${cxxflags} -c -o ${o_outfile} ${c_infile}";
}
